name: 🚀 Deploy SmartLead to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: 'false'

jobs:
  deploy:
    name: 🌐 Deploy to Server
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: � Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: root
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # Cores para output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'
          
          echo -e "${GREEN}🚀 Iniciando deploy automático do SmartLead...${NC}"
          
          # Navegar para diretório ou criar
          cd /opt || mkdir -p /opt && cd /opt
          
          # Se não existe o diretório, fazer clone
          if [ ! -d "smartlead" ]; then
            echo -e "${YELLOW}📥 Clonando repositório...${NC}"
            git clone https://github.com/jeanasilva/test_smartlead.git smartlead
          fi
          
          cd smartlead
          
          # Atualizar código
          echo -e "${YELLOW}🔄 Atualizando código...${NC}"
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          
          # Criar arquivo .env.prod automaticamente
          echo -e "${YELLOW}📝 Criando .env.prod...${NC}"
          cat > .env.prod << 'ENV_EOF'
          # Environment de Produção - SmartLead
          # Gerado automaticamente pelo GitHub Actions
          
          APP_NAME="SmartLead API"
          APP_ENV=production
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=https://smartlead.jeansilva.dev.br
          
          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=error
          
          # Database - Produção
          DB_CONNECTION=mysql
          DB_HOST=db
          DB_PORT=3306
          DB_DATABASE=smartlead_db
          DB_USERNAME=smartlead
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          
          # Redis
          REDIS_HOST=redis
          REDIS_PASSWORD=null
          REDIS_PORT=6379
          
          # Email
          MAIL_MAILER=smtp
          MAIL_HOST=smtp.zoho.com
          MAIL_PORT=587
          MAIL_USERNAME=offboard@offboard.com.br
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_ENCRYPTION=tls
          MAIL_FROM_ADDRESS=offboard@offboard.com.br
          MAIL_FROM_NAME="SmartLead"
          
          # JWT
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          # Frontend URL
          VUE_APP_API_BASE_URL=https://smartlead.jeansilva.dev.br/api
          
          # AWS (opcional)
          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false
          
          # Pusher (opcional)
          PUSHER_APP_ID=
          PUSHER_APP_KEY=
          PUSHER_APP_SECRET=
          PUSHER_APP_CLUSTER=mt1
          
          MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
          MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
          ENV_EOF
          
          # Executar deploy
          echo -e "${GREEN}🚀 Executando deploy...${NC}"
          chmod +x deploy.sh
          make deploy
          
          # Configurar nginx se necessário
          if [ ! -f /etc/nginx/sites-available/smartlead ]; then
            echo -e "${YELLOW}🌐 Configurando Nginx...${NC}"
            cp nginx-server-config.conf /etc/nginx/sites-available/smartlead
            ln -sf /etc/nginx/sites-available/smartlead /etc/nginx/sites-enabled/
            nginx -t && systemctl reload nginx
            
            # Configurar SSL se certbot estiver instalado
            if command -v certbot &> /dev/null; then
              certbot --nginx -d smartlead.jeansilva.dev.br --non-interactive --agree-tos --email admin@jeansilva.dev.br
            fi
          fi
          
          echo -e "${GREEN}✅ Deploy concluído com sucesso!${NC}"
          echo -e "${BLUE}🌐 Aplicação: https://smartlead.jeansilva.dev.br${NC}"
          echo -e "${BLUE}📚 API Docs: https://smartlead.jeansilva.dev.br/api/documentation${NC}"
          
          # Verificar status
          docker-compose -f docker-compose.prod.yml ps
        
    - name: 🔍 Verify Deployment
      run: |
        echo "🔍 Verificando se a aplicação está online..."
        sleep 30
        curl -f http://${{ secrets.SERVER_HOST }}:8080/api/health || echo "⚠️ Aplicação pode estar iniciando ainda..."
        
    - name: 📊 Deployment Summary
      run: |
        echo "### 🚀 Deploy Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Status**: Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **URL**: https://smartlead.jeansilva.dev.br" >> $GITHUB_STEP_SUMMARY
        echo "📚 **API Docs**: https://smartlead.jeansilva.dev.br/api/documentation" >> $GITHUB_STEP_SUMMARY
        echo "🕐 **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔧 **Services deployed**:" >> $GITHUB_STEP_SUMMARY
        echo "- Nginx (Proxy)" >> $GITHUB_STEP_SUMMARY
        echo "- Laravel API" >> $GITHUB_STEP_SUMMARY
        echo "- Vue.js Frontend" >> $GITHUB_STEP_SUMMARY
        echo "- MySQL Database" >> $GITHUB_STEP_SUMMARY
        echo "- Redis Cache" >> $GITHUB_STEP_SUMMARY
